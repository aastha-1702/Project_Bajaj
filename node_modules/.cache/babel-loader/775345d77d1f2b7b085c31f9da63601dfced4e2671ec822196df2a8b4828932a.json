{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Bajaj Finserv\\\\doctor-listing\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchDoctors } from './services/api'; // Import the API service\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [doctors, setDoctors] = useState([]); // State to store doctor data\n  const [error, setError] = useState(null); // State to store any error messages\n\n  // Fetch doctors when the component mounts\n  useEffect(() => {\n    const getDoctors = async () => {\n      try {\n        const doctorData = await fetchDoctors(); // Fetch data from the API\n        setDoctors(doctorData); // Set the data in state\n      } catch (err) {\n        setError('Failed to load doctors'); // Handle error if API fails\n        console.error(err); // Log the error for debugging\n      }\n    };\n    getDoctors(); // Call the function to fetch doctors\n  }, []); // Empty dependency array ensures this runs once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Doctor Listing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: doctors.length > 0 ? doctors.map(doctor => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: doctor.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: doctor.specialty\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Experience: \", doctor.experience, \" years\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Fee: \\u20B9\", doctor.fee]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 15\n        }, this)]\n      }, doctor.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No doctors found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this) // Show message if no doctors are available\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"hr4LEtiDTbGqEj8VzF66CIZvAJM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","fetchDoctors","jsxDEV","_jsxDEV","App","_s","doctors","setDoctors","error","setError","getDoctors","doctorData","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","doctor","name","specialty","experience","fee","id","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/Bajaj Finserv/doctor-listing/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchDoctors } from './services/api'; // Import the API service\n\nconst App = () => {\n  const [doctors, setDoctors] = useState([]); // State to store doctor data\n  const [error, setError] = useState(null);   // State to store any error messages\n\n  // Fetch doctors when the component mounts\n  useEffect(() => {\n    const getDoctors = async () => {\n      try {\n        const doctorData = await fetchDoctors(); // Fetch data from the API\n        setDoctors(doctorData); // Set the data in state\n      } catch (err) {\n        setError('Failed to load doctors'); // Handle error if API fails\n        console.error(err); // Log the error for debugging\n      }\n    };\n\n    getDoctors(); // Call the function to fetch doctors\n  }, []); // Empty dependency array ensures this runs once when the component mounts\n\n  return (\n    <div>\n      <h1>Doctor Listing</h1>\n      {error && <p>{error}</p>} {/* Display error message if any */}\n      <div>\n        {doctors.length > 0 ? (\n          doctors.map((doctor) => (\n            <div key={doctor.id}>\n              <h2>{doctor.name}</h2>\n              <p>{doctor.specialty}</p>\n              <p>Experience: {doctor.experience} years</p>\n              <p>Fee: â‚¹{doctor.fee}</p>\n            </div>\n          ))\n        ) : (\n          <p>No doctors found</p> // Show message if no doctors are available\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,YAAY,QAAQ,gBAAgB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAG;;EAE5C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMU,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,UAAU,GAAG,MAAMV,YAAY,CAAC,CAAC,CAAC,CAAC;QACzCM,UAAU,CAACI,UAAU,CAAC,CAAC,CAAC;MAC1B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZH,QAAQ,CAAC,wBAAwB,CAAC,CAAC,CAAC;QACpCI,OAAO,CAACL,KAAK,CAACI,GAAG,CAAC,CAAC,CAAC;MACtB;IACF,CAAC;IAEDF,UAAU,CAAC,CAAC,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEP,OAAA;IAAAW,QAAA,gBACEX,OAAA;MAAAW,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACtBV,KAAK,iBAAIL,OAAA;MAAAW,QAAA,EAAIN;IAAK;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAAC,GAAC,eAC1Bf,OAAA;MAAAW,QAAA,EACGR,OAAO,CAACa,MAAM,GAAG,CAAC,GACjBb,OAAO,CAACc,GAAG,CAAEC,MAAM,iBACjBlB,OAAA;QAAAW,QAAA,gBACEX,OAAA;UAAAW,QAAA,EAAKO,MAAM,CAACC;QAAI;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACtBf,OAAA;UAAAW,QAAA,EAAIO,MAAM,CAACE;QAAS;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACzBf,OAAA;UAAAW,QAAA,GAAG,cAAY,EAACO,MAAM,CAACG,UAAU,EAAC,QAAM;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAC5Cf,OAAA;UAAAW,QAAA,GAAG,aAAM,EAACO,MAAM,CAACI,GAAG;QAAA;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAJjBG,MAAM,CAACK,EAAE;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKd,CACN,CAAC,gBAEFf,OAAA;QAAAW,QAAA,EAAG;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,CAAC;IACzB;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACb,EAAA,CAvCID,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AAyCT,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}