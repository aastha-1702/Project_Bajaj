{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Bajaj Finserv\\\\doctor-listing\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState, useEffect } from 'react';\nimport SearchBar from './components/SearchBar';\nimport DoctorList from './components/DoctorList';\nimport FilterPanel from './components/FilterPanel';\nimport { fetchDoctors } from './services/api';\nimport './App.css'; // Import your CSS file for styling\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [doctors, setDoctors] = useState([]);\n  const [filteredDoctors, setFilteredDoctors] = useState([]);\n  const [filters, setFilters] = useState({\n    consultationType: '',\n    // 'Video Consult' or 'In Clinic'\n    specialties: [],\n    // Array of selected specialties\n    sortBy: '' // 'fees' or 'experience'\n  });\n  const [loading, setLoading] = useState(true);\n\n  // Fetch doctors data from the API\n  useEffect(() => {\n    const fetchData = async () => {\n      const data = await fetchDoctors();\n      setDoctors(data);\n      setFilteredDoctors(data);\n      setLoading(false); // Data has been loaded\n    };\n    fetchData();\n  }, []);\n\n  // Filter doctors based on filters and sort conditions\n  useEffect(() => {\n    let filtered = doctors;\n\n    // Apply consultation type filter\n    if (filters.consultationType) {\n      filtered = filtered.filter(doctor => doctor.consultationType === filters.consultationType);\n    }\n\n    // Apply specialties filter\n    if (filters.specialties.length > 0) {\n      filtered = filtered.filter(doctor => filters.specialties.some(specialty => doctor.specialties.includes(specialty)));\n    }\n\n    // Apply sort by fees or experience\n    if (filters.sortBy === 'fees') {\n      filtered = filtered.sort((a, b) => a.fee - b.fee); // Sort by fee (ascending)\n    } else if (filters.sortBy === 'experience') {\n      filtered = filtered.sort((a, b) => b.experience - a.experience); // Sort by experience (descending)\n    }\n    setFilteredDoctors(filtered);\n  }, [filters, doctors]);\n\n  // Handle search query from the SearchBar component\n  const handleSearch = query => {\n    if (query === '') {\n      setFilteredDoctors(doctors); // If search query is empty, reset to original list\n    } else {\n      const filtered = doctors.filter(doctor => doctor.name.toLowerCase().includes(query.toLowerCase()) // Filter doctors by name\n      );\n      setFilteredDoctors(filtered);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this) // You can replace this with a spinner or another loading indicator\n    : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n        doctors: doctors,\n        onSearch: handleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FilterPanel, {\n        setFilters: setFilters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DoctorList, {\n        doctors: filteredDoctors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"9zPRqPFTdF5jwZZJ7QW6pi5uLrw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SearchBar","DoctorList","FilterPanel","fetchDoctors","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","doctors","setDoctors","filteredDoctors","setFilteredDoctors","filters","setFilters","consultationType","specialties","sortBy","loading","setLoading","fetchData","data","filtered","filter","doctor","length","some","specialty","includes","sort","a","b","fee","experience","handleSearch","query","name","toLowerCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/Bajaj Finserv/doctor-listing/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useState, useEffect } from 'react';\nimport SearchBar from './components/SearchBar';\nimport DoctorList from './components/DoctorList';\nimport FilterPanel from './components/FilterPanel';\nimport { fetchDoctors } from './services/api';\nimport './App.css'; // Import your CSS file for styling\n\nconst App = () => {\n  const [doctors, setDoctors] = useState([]);\n  const [filteredDoctors, setFilteredDoctors] = useState([]);\n  const [filters, setFilters] = useState({\n    consultationType: '',  // 'Video Consult' or 'In Clinic'\n    specialties: [],        // Array of selected specialties\n    sortBy: ''              // 'fees' or 'experience'\n  });\n  const [loading, setLoading] = useState(true);\n\n  // Fetch doctors data from the API\n  useEffect(() => {\n    const fetchData = async () => {\n      const data = await fetchDoctors();\n      setDoctors(data);\n      setFilteredDoctors(data);\n      setLoading(false); // Data has been loaded\n    };\n    fetchData();\n  }, []);\n\n  // Filter doctors based on filters and sort conditions\n  useEffect(() => {\n    let filtered = doctors;\n\n    // Apply consultation type filter\n    if (filters.consultationType) {\n      filtered = filtered.filter(\n        (doctor) => doctor.consultationType === filters.consultationType\n      );\n    }\n\n    // Apply specialties filter\n    if (filters.specialties.length > 0) {\n      filtered = filtered.filter((doctor) =>\n        filters.specialties.some((specialty) =>\n          doctor.specialties.includes(specialty)\n        )\n      );\n    }\n\n    // Apply sort by fees or experience\n    if (filters.sortBy === 'fees') {\n      filtered = filtered.sort((a, b) => a.fee - b.fee); // Sort by fee (ascending)\n    } else if (filters.sortBy === 'experience') {\n      filtered = filtered.sort((a, b) => b.experience - a.experience); // Sort by experience (descending)\n    }\n\n    setFilteredDoctors(filtered);\n  }, [filters, doctors]);\n\n  // Handle search query from the SearchBar component\n  const handleSearch = (query) => {\n    if (query === '') {\n      setFilteredDoctors(doctors); // If search query is empty, reset to original list\n    } else {\n      const filtered = doctors.filter((doctor) =>\n        doctor.name.toLowerCase().includes(query.toLowerCase()) // Filter doctors by name\n      );\n      setFilteredDoctors(filtered);\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      {loading ? (\n        <div>Loading...</div> // You can replace this with a spinner or another loading indicator\n      ) : (\n        <>\n          {/* Search Bar */}\n          <SearchBar doctors={doctors} onSearch={handleSearch} />\n\n          {/* Filter Panel */}\n          <FilterPanel setFilters={setFilters} />\n\n          {/* Doctor List */}\n          <DoctorList doctors={filteredDoctors} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}