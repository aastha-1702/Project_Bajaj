{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Bajaj Finserv\\\\doctor-listing\\\\src\\\\components\\\\SearchBar.js\",\n  _s = $RefreshSig$();\n// src/components/SearchBar.js\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchBar = ({\n  doctors,\n  onSearch\n}) => {\n  _s();\n  const [query, setQuery] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n\n  // Filter doctors based on search query\n  useEffect(() => {\n    if (query === '') {\n      setSuggestions([]); // Clear suggestions when query is empty\n    } else {\n      const filteredDoctors = doctors.filter(doctor => doctor.name.toLowerCase().includes(query.toLowerCase()) // Case insensitive match\n      );\n      setSuggestions(filteredDoctors.slice(0, 3)); // Limit to top 3 results\n    }\n  }, [query, doctors]);\n  const handleChange = event => {\n    setQuery(event.target.value); // Update query on input change\n  };\n  const handleSelect = doctor => {\n    setQuery(doctor.name); // Update search query with selected doctor name\n    onSearch(doctor.name); // Notify parent component with the selected doctor's name\n    setSuggestions([]); // Clear suggestions after selection\n  };\n  const handleKeyDown = event => {\n    if (event.key === 'Enter' && suggestions.length > 0) {\n      handleSelect(suggestions[0]); // If Enter is pressed, select the first suggestion\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: query,\n      onChange: handleChange,\n      onKeyDown: handleKeyDown // Handle Enter key press\n      ,\n      placeholder: \"Search for doctors\",\n      \"data-testid\": \"autocomplete-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), suggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: suggestions.map(doctor => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => handleSelect(doctor) // Select on click\n        ,\n        \"data-testid\": \"suggestion-item\",\n        children: doctor.name\n      }, doctor.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), query && suggestions.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No matches found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this) // Display when no suggestions match the query\n    ]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchBar, \"H+CwcOiULX5wFZRq1r/V7g8sot8=\");\n_c = SearchBar;\nexport default SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SearchBar","doctors","onSearch","_s","query","setQuery","suggestions","setSuggestions","filteredDoctors","filter","doctor","name","toLowerCase","includes","slice","handleChange","event","target","value","handleSelect","handleKeyDown","key","length","children","type","onChange","onKeyDown","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","id","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/Bajaj Finserv/doctor-listing/src/components/SearchBar.js"],"sourcesContent":["// src/components/SearchBar.js\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst SearchBar = ({ doctors, onSearch }) => {\r\n  const [query, setQuery] = useState('');\r\n  const [suggestions, setSuggestions] = useState([]);\r\n\r\n  // Filter doctors based on search query\r\n  useEffect(() => {\r\n    if (query === '') {\r\n      setSuggestions([]); // Clear suggestions when query is empty\r\n    } else {\r\n      const filteredDoctors = doctors.filter((doctor) =>\r\n        doctor.name.toLowerCase().includes(query.toLowerCase()) // Case insensitive match\r\n      );\r\n      setSuggestions(filteredDoctors.slice(0, 3)); // Limit to top 3 results\r\n    }\r\n  }, [query, doctors]);\r\n\r\n  const handleChange = (event) => {\r\n    setQuery(event.target.value); // Update query on input change\r\n  };\r\n\r\n  const handleSelect = (doctor) => {\r\n    setQuery(doctor.name); // Update search query with selected doctor name\r\n    onSearch(doctor.name); // Notify parent component with the selected doctor's name\r\n    setSuggestions([]); // Clear suggestions after selection\r\n  };\r\n\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === 'Enter' && suggestions.length > 0) {\r\n      handleSelect(suggestions[0]); // If Enter is pressed, select the first suggestion\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        value={query}\r\n        onChange={handleChange}\r\n        onKeyDown={handleKeyDown} // Handle Enter key press\r\n        placeholder=\"Search for doctors\"\r\n        data-testid=\"autocomplete-input\"\r\n      />\r\n      {suggestions.length > 0 && (\r\n        <ul>\r\n          {suggestions.map((doctor) => (\r\n            <li\r\n              key={doctor.id}\r\n              onClick={() => handleSelect(doctor)} // Select on click\r\n              data-testid=\"suggestion-item\"\r\n            >\r\n              {doctor.name}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n      {query && suggestions.length === 0 && (\r\n        <p>No matches found</p> // Display when no suggestions match the query\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}